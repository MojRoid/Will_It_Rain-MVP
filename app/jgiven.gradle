def adb = android.getAdbExecutable().toString()
def deviceReportsDir = '/storage/emulated/0/Download/jgiven-reports'
def localJsonDir = 'build/reports/jgiven/json'
def localHtmlDir = 'build/reports/jgiven/html'

////////////////////////////////////////////////////////////////////////////////////////////////////
// Delete previous local reports directory                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////

task cleanLocalJGivenReports(type: Delete) {
    delete localJsonDir
    delete localHtmlDir

    doLast {
        println("Cleaned directories: " + localJsonDir + " | " + localHtmlDir)
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Delete device report directory                                                                 //
////////////////////////////////////////////////////////////////////////////////////////////////////

task cleanDeviceJGivenReports(type: Exec) {
    commandLine adb, 'shell', 'rm -r', deviceReportsDir

    doLast {
        println("Cleaned directory: " + deviceReportsDir)
    }

////////////////////////////////////////////////////////////////////////////////////////////////////
// Pull in JSON report from device                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////

    task pullJGivenReports(type: Exec) {
        doFirst {
            tasks.cleanLocalJGivenReports.execute()
            if (!file(localJsonDir).mkdirs()) {
                println("Cannot create dir " + localJsonDir)
            }
        }

        commandLine adb, 'pull', deviceReportsDir, localJsonDir

        doLast {
            println("Pulled " + deviceReportsDir + " to " + localJsonDir)
            tasks.cleanDeviceJGivenReports.execute()
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////
// Configure dependencies for HTML5 conversion                                                    //
////////////////////////////////////////////////////////////////////////////////////////////////////

    configurations {
        jgiven
    }
    dependencies {
        jgiven "com.tngtech.jgiven:jgiven-core:$jgiven_version"
        jgiven "com.tngtech.jgiven:jgiven-html5-report:$jgiven_version"
    }

////////////////////////////////////////////////////////////////////////////////////////////////////
// Converts JGiven JSON reports to HTML5 reports                                                  //
////////////////////////////////////////////////////////////////////////////////////////////////////

    task(jGivenGenerateHtmlTestReport, dependsOn: pullJGivenReports, type: JavaExec) {
        doFirst {
            tasks.pullJGivenReports.execute()
        }

        main = 'com.tngtech.jgiven.report.ReportGenerator'
        classpath configurations.jgiven
        args "--format=html5", "--sourceDir=" + localJsonDir, "--targetDir=" + localHtmlDir

        doLast {
            println("HTML report generated from JSON")
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////
// Generate HTML5 report after instrumented tests                                                 //
////////////////////////////////////////////////////////////////////////////////////////////////////

    if (System.getenv('CI') == null || !System.getenv('CI')) {
        gradle.projectsEvaluated {
            connectedDebugAndroidTest.finalizedBy jGivenGenerateHtmlTestReport
        }
    }

    if (System.getenv('CI')) {
        android {
            sourceSets {
                androidTest {
                    java {
                        exclude '**/BDD/**'
                    }
                }
            }
        }
    }
}

apply plugin: 'jacoco'

android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Task for combining UnitTest and Instrumented Tests coverage reports                            //
////////////////////////////////////////////////////////////////////////////////////////////////////

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/*_ViewBinding*.*',
                      '**/*Factory*.class',
                      '**/*AutoValue*.*',
                      '**/injection/*.*',
                      '**/model/*.*',
                      '**/model/**/*.*',
                      '**/*Provider*.class',
                      '**/*App.*',
                      '**/*Test*.*',
                      '**/*_MembersInjector.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Lambda*.*']

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}
